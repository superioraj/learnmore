# 11. 모듈과 패키지 이해하기
## 모듈 이해하기
* 모듈은 함수나 변수 또는 클래스를 모아 놓은 파이썬 파일입니다.
* 한 프로그램에서 여러 모듈(파이썬 파일)을 가져와서 사용할 수 있습니다.
* ```import 모듈이름```으로 가져옵니다.
* 만약 파이썬 파일 이름이 파이썬1.py이라면 import 파이썬1로 가져옵니다.
* 모듈이름.변수, 모듈이름.함수, 모듈이름.클래스()과 같이 사용합니다.
* 모듈을 가져올 때 파일을 같은 폴더에 놓아야 합니다.
* calculate.py 파일을 만듭니다.
```python
def add(x,y):
    return x+y

def multiply(x,y):
    return x*y
````

* calculate.py와 같은 폴더에 module_test.py 파일을 만듭니다.
```python
import calculate

a = calculate.add(3,4)
print(a)
b = calculate.multiply(3,4)
print(b)
```

* ```import 모듈이름 as 새로운이름```으로 모듈을 새로운 이름으로 사용할 수 있습니다.
```python
import calculate as cal

a = cal.add(3,4)
print(a)
b = cal.multiply(3,4)
print(b)
```

* ```from 모듈 import *```를 하면 모든 변수, 함수, 클래스를 가져옵니다.
* 사용할 때 모듈이름을 붙이지 않아도 됩니다.
```python
from calculate import *

a = add(3,4)
print(a)
b = multiply(3,4)
print(b)
```

* ```__name__```은 파이썬 내장변수입니다.
* ```__name__```에는 파일이름 또는 모듈이름이 들어갑니다.
* ```if __name__ == '__main__':```는 모듈로 가져온 것이 아니라 해당 코드를 직접 실행했을 때를 말합니다.
1. 관리자 권한으로 파이썬 IDLE를 실행합니다.
2. test1.py를 만들고 ```print(__name__)```를 입력하고 실행합니다. ```__main__```이라고 나옵니다.
3. test2.py를 만들고 ```print(__name__)```를 입력합니다. 
4. test1.py에서 ```import test2```를 입력하고 실행합니다. ```test2```라고 나옵니다

* os 모듈을 사용해보겠습니다.
* os.chdir(r"경로")로 작업 폴더를 바꿉니다.
* os.getcwd()로 현재 작업 폴더의 경로를 확인할 수 있습니다.
* r를 사용하면 탐색기의 경로를 그대로 복사해서 사용할 수 있습니다.
* 그렇지 않으면 \를 두개 사용해서 경로를 나타내야 합니다.
* C:드라이브 아래 module 폴더를 만듭니다.
* 여러 파일을 만듭니다.
* os.listdir("경로")로 어떤 파일과 폴더가 있는지 알 수 있습니다.

## 패키지 이해하기
* 패키지는 점(.)을 사용하여 파이썬 모듈을 디렉터리 구조로 관리할 수 있게 해줍니다.
* inspect 모듈을 사용해서 모듈이 설치된 경로를 확인합니다.
```python
import inspect
import random
print(inspect.getfile(random))
```
* module 폴더를 찾은 경로로 옮깁니다.
* module 안에 name과 age 폴더를 만듭니다.
* 각 폴더에 name.py과 age.py를 만듭니다.
* ```import module.name.name```과 같이 사용할 수 있습니다. 
* ```from module.name.name import 변수, 함수```와 같이 원하는 변수, 함수 등을 가져와서 사용할 수 있습니다. 
* 전 세계의 파이썬 사용자들이 만든 유용한 프로그램을 모아 놓은 것이 라이브러리입니다.
* 라이브러리도 모듈이라고 생각하면 됩니다.
* os, time 등 다양한 라이브러리가 있습니다.
* pip로 파이썬 패키지(라이브러리)를 쉽게 설치할 수 있습니다.
* https://pypi.org/ 에 다양한 패키지(라이브러리)를 확인할 수 있습니다.
* pip install 패키지이름으로 설치합니다.
```
pip install 패키지이름
```
* pip 버전이 이전 버전이어서 안되는 경우가 있습니다.
* python -m pip install --upgrade pip 입력하면 pip가 업그레이드됩니다.
```
python -m pip install --upgrade pip
```
* pip install --upgrade 패키지이름 입력하여 업그레이드합니다
```
pip install --upgrade 패키지이름
```
