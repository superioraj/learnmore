# 제어문으로 코딩하기
## if문 알아보기
* 조건을 만족시킬 때 문장을 실행할 수 있습니다.
```python
if 조건문:
    실행할 문장1
    실행할 문장2
```

```python
if 조건문:
    실행할 문장1
    실행할 문장2
else:
    실행할 문장1
    실행할 문장2
```

```python
if 조건문:
    실행할 문장1
    실행할 문장2
elif 조건문:
    실행할 문장1
    실행할 문장2
else:
    실행할 문장1
    실행할 문장2
```

* 조건문에 여러 비교 연산자를 사용할 수 있습니다.
* 같다(==), 같지 않다(!=), 크다(>), 작다(<), 크거나 같다(>=), 작거나 같다(<=)
```python
a = 10
b = 5
if a > b:
    print("a가 b보다 큽니다.")
```

* ```in```으로 리스트, 튜플, 문자열에 해당 원소, 문자열이 있는지 알 수 있습니다.
```python
a = [1,2,3]
print(1 in a)

b = "banana"
print("t" in b)
```

* ```input()```를 사용해서 사용자가 입력한 내용을 저장할 수 있습니다.
```python
score = int(input("점수를 입력하세요 : "))
if score > 60:
    print("합격입니다.")
else:
    print("불합격입니다.")
```

## while문 알아보기
* while문을 사용해서 반복할 수 있습니다.
```python
while 조건문:
    실행할 문장1
    실행할 문장2
```

* continue과 break를 사용해서 반복문을 계속할지, 그만할지 정할 수 있습니다.
* continue가 실행되면 while문의 가장 위쪽부터 코드가 다시 실행됩니다.
* break가 실행되면 while문을 빠져나와서 while문 아래부터 코드가 실행됩니다.

## for문 알아보기
* for문을 사용해서 반복할 수 있습니다.
```python
for 변수 in 시퀀스 자료형:
    실행할 문장1
    실행할 문장2
```

* continue과 break를 사용해서 반복문을 계속할지, 그만할지 정할 수 있습니다.

* for문과 ```range()함수```를 같이 사용하는 경우가 많습니다.
* ```range(시작, 끝, 간격)```으로 사용합니다.
* 끝에 입력한 숫자는 포함되지 않습니다.
* 간격을 입력하지 않으면 기본값이 1이 됩니다.
* ```range(끝)```을 하면 시작은 0이 되고, 간격은 1이 됩니다. 

## 반복문을 사용해서 구구단을 만들기
