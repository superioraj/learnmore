# 10. 클래스로 코딩에 날개 달기
## 클래스 이해하기
* class 키워드로 클래스를 만듭니다.
* 클래스이름의 첫글자는 대문자로 정합니다.
* 상속받는 클래스가 없다면 클래스이름 뒤에 ()를 쓰지 않아도 됩니다.
```python
class 클래스이름():
    속성1
    속성2
    ...
    메소드1
    메소드2
```

* ```id()```로 레퍼런스값(메모리주소)를 알 수 있습니다.
```python
class MyClass():
   pass

a = MyClass()
b = MyClass()
print(id(a))
print(id(b))
```

* 클래스의 메소드(함수)를 만듭니다.
* 함수 안에 매개변수로 self를 넣어야 합니다.
* self 대신에 다른 이름을 사용해도 됩니다.
* self는 클래스로 만든 객체 자신을 말합니다.
```python
class 클래스이름():
    def 함수이름(self, 매개변수1, 매개변수2):
        self.매개변수1 = 값1
        self.매개변수2 = 값2
        실행할 문장1
```

```python
class MyClass():
   def print_hi(self):
       print("hi")

a = MyClass()
a.print_hi()

b = MyClass()
b.print_hi()
```

```python
class MyClass():
    def set_info(self, name, age):
        self.name = name
        self.age = age    
    def print_info(self):
        print("내 이름은 {0}입니다.".format(self.name))
        print("내 나이는 {0}입니다.".format(self.age))

a = MyClass()
a.set_info("파이썬", 10)

b = MyClass()
b.set_info("드론", 20)

a.print_info()
b.print_info()
```

## 생성자, 초기화, 소멸자 알아보기
* 생성자를 만들어서 처음 클래스를 만들었을 때 실행하는 함수를 정합니다.
* __new__(클래스 객체 레퍼런스)를 사용해서 생정자 함수를 만듭니다.
* 클래스 객체 레퍼런스는 self와 같은 역할을 합니다.
* ( __ )로 시작하는 함수는 특별한 메소드입니다. 
```python
class MyClass():
    def __new__(cls):
        print("객체를 만들었습니다.")
   
a = MyClass()
b = MyClass()
```

* 초기화는 객체를 처음 만들 때 여러 속성값을 정하는 것입니다.
* __init__(self, 매개변수1, 매개변수1)로 초기화를 합니다.
* __name__(cls)안에 같은 매개변수 이름을 넣어야 합니다.
* return object.__new__(cls)도 설정합니다.
* 객체를 만들 때 인자를 넣어서 만들어야 합니다.
```python
class MyClass():
    def __new__(cls, name, age):
        print("객체를 만들었습니다.")
        return object.__new__(cls)
    
    def __init__(self, name, age):
        self.name = name
        self.age = age
   
a = MyClass("파이썬", 10)
b = MyClass("드론", 20)
print(a.name, a.age)
print(b.name, b.age)
```
* 소멸자를 만들어서 객체를 삭제했을 때 실행하는 함수를 정합니다.
* __del__(self)로 정합니다.
* del 객체로 삭제합니다.
```python
def __del__(self):
        print("객체가 삭제되었습니다.")
```

## 클래스 상속하기
* 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있습니다.
```python
class 클래스이름(상속받을 클래스이름):
    속성1
    속성2
    메서드1
    메서드2
```

```python
class Parent():
    def __init__(self, name):
        self.name = name

class Child(Parent):
    pass

a = Child("파이썬")
print(a.name)
```

* 부모에게 물려받은 메서드를 새롭게 만들 수 있습니다. 이것을 메서드 오버라이딩이라고 합니다.
```python
class Animal():
    def say(self, message):
        print(message)

class Dog(Animal):
    def say(self, message):
        print("멍멍")
        
class Bird(Animal):
    def say(self, message):
        print("짹짹")
        
a = Animal()
a.say("울음소리")
b = Dog()
b.say("울음소리")
c = Bird()
c.say("울음소리")
```
